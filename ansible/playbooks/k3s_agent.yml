---
- name: Deploy K3s with WhatsApp Server using Community Roles
  hosts: all
  become: true
  vars:
    # K3s configuration
    k3s_version: "v1.28.5+k3s1"
    k3s_server_config:
      disable:
        - traefik
      node-label:
        - "environment={{ environment }}"
    
    # WhatsApp application configuration
    whatsapp_image: "{{ whatsapp_server_image_uri }}"
    whatsapp_namespace: "whatsapp"
    
    # CloudWatch configuration (for AWS environments)
    cloudwatch_agent_enabled: "{{ environment == 'prod' }}"
    
  pre_tasks:
    - name: Update system packages (RHEL/CentOS/Amazon Linux)
      package:
        name: "*"
        state: latest
      when: ansible_os_family == "RedHat"
      
    - name: Update system packages (Debian/Ubuntu)
      apt:
        upgrade: yes
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install required packages
      package:
        name:
          - curl
          - wget
          - unzip
          - git
        state: present

  roles:
    # Install and configure K3s using community role
    - role: xanmanning.k3s
      vars:
        k3s_state: installed
        k3s_release_version: "{{ k3s_version }}"
        k3s_server: "{{ k3s_server_config }}"
        k3s_use_experimental: false
        
    # Install CloudWatch agent for production monitoring
    - role: cisagov.cloudwatch_agent
      when: cloudwatch_agent_enabled
      vars:
        cloudwatch_agent_config:
          logs:
            logs_collected:
              files:
                collect_list:
                  - file_path: "/var/log/k3s.log"
                    log_group_name: "/aws/ec2/k3s"
                    log_stream_name: "{instance_id}"

  post_tasks:
    - name: Wait for K3s to be ready
      wait_for:
        port: 6443
        host: 127.0.0.1
        timeout: 300

    - name: Create WhatsApp namespace
      kubernetes.core.k8s:
        name: "{{ whatsapp_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    - name: Deploy WhatsApp server
      kubernetes.core.k8s:
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: whatsapp-server
            namespace: "{{ whatsapp_namespace }}"
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: whatsapp-server
            template:
              metadata:
                labels:
                  app: whatsapp-server
              spec:
                hostNetwork: true
                containers:
                - name: whatsapp
                  image: "{{ whatsapp_image }}"
                  imagePullPolicy: Always
                  ports:
                  - containerPort: 21465
                    hostPort: 21465
                  env:
                  - name: NODE_ENV
                    value: "{{ environment }}"
                  - name: PORT
                    value: "21465"
                  volumeMounts:
                  - name: profiles
                    mountPath: /app/profiles
                  - name: tokens
                    mountPath: /app/tokens
                volumes:
                - name: profiles
                  hostPath:
                    path: /opt/whatsapp/profiles
                    type: DirectoryOrCreate
                - name: tokens
                  hostPath:
                    path: /opt/whatsapp/tokens
                    type: DirectoryOrCreate
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    - name: Create WhatsApp service
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: whatsapp-service
            namespace: "{{ whatsapp_namespace }}"
          spec:
            selector:
              app: whatsapp-server
            ports:
            - port: 21465
              targetPort: 21465
            type: NodePort
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml

    - name: Wait for WhatsApp deployment to be ready
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        name: whatsapp-server
        namespace: "{{ whatsapp_namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
        wait_condition:
          type: Available
          status: "True"
        wait_timeout: 300

    - name: Verify WhatsApp health endpoint
      uri:
        url: "http://localhost:21465/health"
        method: GET
        status_code: 200
      retries: 10
      delay: 30
      register: health_check
      until: health_check.status == 200

    # Day-2 Operations: Auto-updates via systemd timer
    - name: Create ansible-pull update service
      copy:
        content: |
          [Unit]
          Description=K3s Ansible Pull Update
          After=network-online.target
          Wants=network-online.target

          [Service]
          Type=oneshot
          User=root
          ExecStart=/usr/local/bin/ansible-pull -U https://github.com/{{ ansible_user_id }}/infra-ansible.git playbooks/k3s_agent.yml -e environment={{ environment }} -e whatsapp_server_image_uri={{ whatsapp_server_image_uri }}
          StandardOutput=journal
          StandardError=journal

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/k3s-agent-update.service
        mode: '0644'
      notify: reload systemd

    - name: Create ansible-pull update timer
      copy:
        content: |
          [Unit]
          Description=Run K3s Ansible Pull Update Hourly
          Requires=k3s-agent-update.service

          [Timer]
          OnCalendar=hourly
          Persistent=true
          RandomizedDelaySec=300

          [Install]
          WantedBy=timers.target
        dest: /etc/systemd/system/k3s-agent-update.timer
        mode: '0644'
      notify: reload systemd

    - name: Enable and start k3s-agent-update timer
      systemd:
        name: k3s-agent-update.timer
        enabled: true
        state: started
        daemon_reload: true

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: true 